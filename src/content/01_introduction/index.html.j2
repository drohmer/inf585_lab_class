{% set pageTitle = 'Introduction to INF585 exercises' %}
{% set tocTitle = 'Introduction' %}

{% extends "theme/template/base.html" %}


{% block content %}

<style>
    a .download {color: gray; width:100%; max-width:260px;}
    .download {padding: 2px; border-radius:10px;}
    .download:hover {border: 2px solid gray; padding:0;}
</style>

= Introduction to INF585 exercises


== Download INF585 exercises

Download any of these archive containing all the necessary codes

* - On Github: [<a href="https://github.com/drohmer/inf585_code"> **https://github.com/drohmer/inf585_code** </a>]
::[color:gray]
** __Do not use the "Code \(\rightarrow\) Download Zip" option from github as you would not get the library__
::
* - Or via direct archive download:
** - [<a href="https://imagecomputing.net/damien.rohmer/teaching/inf585/code/inf585_code.zip"> code_inf585.zip </a>]
** - [<a href="https://imagecomputing.net/damien.rohmer/teaching/inf585/code/inf585_code.tar.gz"> code_inf585.tar.gz </a>]


::[height:0.5em;]::

* Make sure you can compile and run the scene in  __scenes_inf585/00_introduction/__.
** Follow the link::https://imagecomputing.net/cgp/compilation/index.html[**detailed Installation and Compilation Instructions** if needed].

::[height:25px;]::

 __Notes on the requirements__
* - Your C++ compiler should be compatible with C++14.
* - Glad is used to load function for OpenGL 3.3.
* - GLFW is used to create a window and handle mouse/key events.
* - ImGUI is used to handle GUI.

== Introductory scene


* The first introductory scene is available in the directory **__scenes_inf585/00_introduction/__**
** - Each exercise is described as a unique program (with its own main) defined in the __scenes/__ directory. 
** - A __CMakeLists.txt__ is associated to each program for its compilation (+ a Makefile for Unix systems).
*** __(you need to adapt the path of the link::https://imagecomputing.net/cgp/compilation/index.html[compilation instructions] to the directory of the CMakeLists.txt for each exercise)__



::[height:25px;]::


* Once executed, you should observe a basic scene as seen below with rotating cylinder, cube, and curve __(some details may vary)__.
** - Note that the source code of the scene is fully described in the files __src/main.cpp__ and __src/scene.cpp (and src/scene.hpp)__. 
** - The __main.cpp__ file contains mostly common elements through all the exercises (general set up of the scene, animation loop, basic handling of the keyboard/mouse input). The specific content is defined in the files __scene.cpp__, and its header __scene.hpp__.

::[text-align:center;]
videoplay::assets/introduction.mp4[width:100%; max-width:550px]
::

=== Information on the library (only general information, no exercise)

link::https://imagecomputing.net/cgp/content/01_general/index.html[CGP library] provides a set of functionalities to ease 3D graphics programming such as 

* - Structure for 3D vectors and matrices (and 2D, 4D).
* - Object structure ready to be displayed with OpenGL (Meshes, lines, etc) and their associated shaders.
* - Easy and secured storage for buffers of elements.
* - 3D scene manipulation: Mouse controlled camera

::[height:0.5em;]::

Structures and functions of the library are accessible in the namespace cgp:: 

::[height:25px;]::

The library tries to be as lightweight as possible. It is written to ease 3D graphics programming, and to not hide underlying working state. Although this is not required, you should be able to understand every part of the code.

::[height:25px;]::

It keeps in particular the following principles

* - Minimalistic code written to be simple to understand (not necessarily the most generic nor efficient). 
* - Objects are written to be lightweight and with minimal hidden states - You can directly interact with object attributes. 
* - The code and functionalities remain close to basic C++/OpenGL - You can use direct OpenGL calls with the library. You should also keep in mind the way that OpenGL works to avoid unexpected display.

==== General structure of the code

Role of the different high level directories

* **scenes_XX/exercise_name/** (ex.scenes_inf585/00_introduction/) Contains the code associated to each 3D scene.
** - One exercise starts with an independant main file (+ possible other files) and associated CMakeLists.txt for its compilation.
** - Most of the time, the main.cpp will only consists in the general call structure (initialization, events handling, animation loop). While the specific data and drawing calls of each exercise will be set in the files scene.cpp/hpp.
** - Changing exercise consists in compiling the code from another directory.
** - All your code will take place in these directories (unless you want to modify the library).

* **cgp/** Relates to the CGP library. 
** - **cgp/library/cgp/** the actual source code of the CGP library: set of structures and functions to ease generating your 3D scene.
** - **cgp/library/third_party/** External library used by CGP such as glad (OpenGL loader), imgui (GUI), lodepng (loader for png images), etc.
** - **cgp/examples/** provides a set of examples of use cases of the library

You may look at the files in the __cgp/__ directory to understand how things works, but in normal cases you should not have to modify these files.


==== Code editor

* The library contains multiples files. Make sure you use a sufficiently advanced (or well parameterized) IDE to have 
** C++ **code completion** (in particular complete function names, display expected arguments and types, objects arguments, etc.)
** efficiently **switch between files** and **jump to the signature and code** of any function and object.

* You may use for instance:
** VS Code with a correct C++ plugins and setup for the compiler.
** QtCreator that works for C++ __out of the box__ (see link::https://imagecomputing.net/cgp/compilation/content/06_ide_qtcreator/index.html[instructions]).


::[height:2em;]::

== Use of the code library and program structure (the exercise starts here)



* > Observe the file __main.cpp__. You should recognize the general organization of the program, in particular the setup stage, and the animation loop stage. Note where the two main methods __scene.initialize()__ and __scene.display_frame()__ are called, and their implementation in the file scene.cpp. <br>
In the following you will only modify code in the file scene.cpp (and scene.hpp).

::[height:25px;]::


*  > Change the rotation (axis and angle) from some of the object within the scene in the function __display_scene__.
** The function __rotation_transform::from_axis_angle(axis_of_rotation, angle_of_rotation);__ generate a structure link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#rotation[cgp::rotation_transform] from a given 3D axis (link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#vec[cgp::vec3]) and scalar angle (float) in radians.
** The structure link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#vec[cgp::vec3] implements a model of 3D vector with (x,y,z) coordinates.
*** You can apply most of the basic operations between vec3 and mat3 using mathematical operators (+,-,*,/).
** The structure link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#rotation[rotation_transform] allowing to generate and manipulate a rotation. The rotation is stored internaly as a quaternion, and can be manipulated similarily to a matrix when applied on a vector.
** The rotation is stored in the variable "model" of a link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#mesh_drawable[mesh_drawable] structure. __model__ stores an link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#affine_transform[affine transformation] which is used as uniform variable when the shape is displayed.


::[height:25px;]::

* Note that there is two type of "mesh" structures in use
::[height:1em;]::
** **- link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#mesh[cgp::mesh]** storing buffer on data (per vertex: position, normal, uv, color, and triangle connectivity) on CPU
*** This structure allows to conveniently access to all the data defining a mesh from the C++ code. However these data are not on the GPU, so a __mesh__ cannot be directly displayed. 
::[height:1em;]::
** **- link::https://imagecomputing.net/cgp/content/02_quick_tour/index.html#mesh_drawable[cgp::mesh_drawable]** storing VBOs associated to these buffer once sent on the GPU memory (in the sub-structure mesh_drawable_gpu_data) as well as its VAO. The structure also stores uniform parameters that are sent to the shader at every draw call. A default shader and texture id are also be stored with the structure.
*** This structure only stores the index corresponding to elements on GPU. You cannot modify individual per-vertex elements easily from this structure.

::[height:25px;]::

** Remark: a __mesh_drawable__ can be automatically generated/initialized from a __mesh__ structure in calling the construction __mesh_drawable.initialize_data_on_gpu(meshName)__. However, you cannot create a __mesh__ from a __mesh_drawable__.



=== Adding a sphere


In this first part we display a new sphere to the scene.

::[height:25px;]::

* > Add the **class variable** to scene_structure class (in the file scene.hpp)

::[margin-left:2.5em;]
code::[c++]
cgp::mesh_drawable sphere; 
code::[-]
::

* __In this example, cgp:: is optional as the header file already indicated "using cgp::mesh_drawable;" in its beginning.__

* > Initialize this variable in the file scene.cpp in the __initialize()__ function as a sphere of radius 0.5

::[margin-left:2.5em;]
code::[c++]
mesh sphere_mesh = mesh_primitive_sphere(0.5f);
sphere.initialize_data_on_gpu(sphere_mesh);
code::[-]
::

::[margin-left:2em;]
* (or variant: simply in one line without explicitely storing the mesh variable)
::[margin-left:2.5em;]
code::[c++]
sphere.initialize_data_on_gpu(mesh_primitive_sphere(0.5f));
code::[-]
::
::

* > Display this sphere in the __display_frame()__ function with the following code

::[margin-left:2.5em;]
code::[c++]
draw(sphere, environment);
code::[-]
::

* > Compile, run, and observe the sphere in the 3D scene.

::[height:25px;]::

* Note: You can set geometric transformation using the uniform properties of the mesh_drawable structure (reminder: uniform are parameters passed to the shaders).
** __sphere.model.translation/rotation/scaling = ... (see example on the other displayed shapes)__
* Note also that unless specified explicitely, the default shader associated to the mesh_drawable structure is used. 
* The three trasformations: translation, rotation, and scaling are simply variables that you can write on. By default, their values are respectively, (0,0,0), the identity, and 1. The content of the variables are used (as uniform values in the shader) when the draw call is used.

::[height:25px;]::

* > Add the following line before calling __draw__ on the sphere and observe that the color (as well as any other uniform parameter) can be changed through time in modifying its value at every frame.

::[margin-left:2.5em;]
code::[c++]
sphere.material.color = vec3(1+std::cos(time), 1+std::sin(time), 2.0)/2.0f;
code::[-]
::







=== Checkbox interface

We will now add a GUI checkbox (button that can be checked) to activate/deactivate the wireframe display of the sphere.

* > Add the following variable in the definition of the structure __struct gui_parameters__ (in the file scene.hpp) to store a boolean state indicating when the wireframe should be displayed or not

::[margin-left:2.5em;]
code::[c++]
bool display_wireframe = false;
code::[-]
::


* > In the function __display_gui()__ (in scene.cpp) add a Checkbox (handled by ImGui library) and link it (through its adress) to the variable __display_wireframe__ in adding this line of code

::[margin-left:2.5em;]
code::[c++]
ImGui::Checkbox("Wireframe", &gui.display_wireframe);
code::[-]
::

* In running the code, the checkbox should appear. Every time you select/unselect it, the value of the variable __display_wireframe__ change from true to false but doesn't change yet anything in the 3D display.

::[height:25px;]::

The last step consists in adapting the behavior of the display. 
* > Add the following code in the __display_frame__ function

::[margin-left:2.5em;]
code::[c++]
	if (gui.display_wireframe)
		draw_wireframe(sphere, environment, { 1,1,0 });
code::[-]
::

* Check that you can now interactively display the wireframe representation of the sphere.


=== Deforming the vertices of a surface

The following example show a case where mesh position are modified in the C++ code and need to be updated at each frame.

* > Add the following elements as variables of the object scene_structure

::[margin-left:2.5em;]
code::[c++]
	mesh shape;
	numarray<vec3> initial_position;
	mesh_drawable shape_visual;
code::[-]
::

** __shape__ is use to store (on CPU memory) the current state of the deformed mesh
** __initial_position__ is use to store (on CPU memory) the initial position of each vertex of the shape
** __shape_visual__ is use to display the deformed shape.

::[height:25px;]::

* > Initialise these variables to a uniformly sampled grid shape in the __initialize__ function with the following code

::[margin-left:2.5em;]
code::[c++]
int N = 100;
shape = mesh_primitive_grid({ 0,0,0 }, { 1,0,0 }, { 1,1,0 }, { 0,1,0 }, N, N);
initial_position = shape.position;
shape_visual.initialize_data_on_gpu(shape);
shape_visual.material.color = { 0.6f, 0.6f, 0.9f };
code::[-]
::

* > Call the drawing of this surface at the end of the __display_frame()__ function

::[margin-left:2.5em;]
code::[c++]
draw(shape_visual, environment);
if (gui.display_wireframe)
    draw_wireframe(shape_visual, environment, { 0,0,0 });
code::[-]
::

* > Add a new method to the scene class computing the deformation of the surface in
** Adding the following content in the file scene.cpp
** Adding the signature of this new method (void evolve_shape()) in the file scene.hpp
** Call this method in the __display()__ function.

::[margin-left:2.5em;]
code::[c++]
void scene_structure::evolve_shape(float time)
{
    size_t const N = initial_position.size();
    for(size_t k=0; k<N; ++k)
    {
        vec3 const& p0 = initial_position[k];
        vec3& p        = shape.position[k];
        p.z = p0.z + 0.1f * std::cos(10 * p.x + 4 * time);
    }
}
code::[-]
::

* While the structure mesh is updated by the function, its visual representation (and the associated VBO) are not therefore no change is visible when the code is run. An explicit update of the data stored on the GPU is necessary. 
* > To this end add the following code after your call to __evolve_shape__

::[margin-left:2.5em;]
code::[c++]
shape_visual.vbo_position.update(shape.position);
code::[-]
::

* This function send again to the GPU the position from the buffer. Note that the update doesn't reallocate any VBO (it is therefore faster that generating a new object) and assume that the size of the buffer remains constant. 

* Observe that the surface is now deformed, but its color remains uniform despite the undulation. Indeed, the shader still use the initial normals of the planar grid, and doesn't take into account the change of geometry in the shading. 
* > Normals of the surface can be recomputed and updated to the GPU using the following code

::[margin-left:2.5em;]
code::[c++]
// Recompute normals on the CPU (given the position and the connectivity currently in the mesh structure)
shape.normal_update();
// Send updated normals on the GPU
shape_visual.vbo_normal.update(shape.normal);
code::[-]
::

* Observe that the surface is now correctly updated through its deformation.

::[height:25px;]::

* > Change in the __evolve_shape__ function the deformation to the following one using Perlin noise, make sure you understand the result.

::[margin-left:2.5em;]
code::[c++]
float const dz = 0.3f * noise_perlin({ p0.x + 0.2f * time, p0.y, 0 }, 2) + 0.015f * noise_perlin({ 4 * p0.x, 4 * p0.y, time }, 2);
p = p0 + vec3(0, 0, dz);
code::[-]
::



=== Texture

Textures images can also be associated to surface <br>
__Note that the per-vertex uv coordinates need to be defined correctly to get the mapping of the image on the surface.__

::[height:25px;]::

* > Update the initialization of your __shape__ variable with the following two lines code and observe that your surface should now be textured

::[margin-left:2.5em;]
code::[c++]
// Reset the color of the shape to white (only the texture image will be seen)
shape_visual.material.color = {1,1,1};

// Load the image and associate the texture id to the structure
shape_visual.texture.load_and_initialize_texture_2d_on_gpu("assets/squirrel.jpg");
code::[-]
::

{% endblock %}